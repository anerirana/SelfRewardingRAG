import numpy as np
import torch
import torch.nn as nn
from transformers import T5Tokenizer, T5ForConditionalGeneration
import DocumentRetrievalModel 

# Utilities
def exists(val):
    return val is not None

def default(val, default_value):
    return val if exists(val) else default_value

class RAGModel(nn.Module):
    def __init__(self, model_name):
        super(RAGModel, self).__init__()
        '''Retrival Augmented Generation model to generate responses for a given query 
        and a set of retieved documents
        '''
        self.tokenizer = T5Tokenizer.from_pretrained(model_name)
        self.model = T5ForConditionalGeneration.from_pretrained(model_name, device_map="auto", torch_dtype=torch.float16)

    def forward(self, prompt):
        '''Generate response for the given prompt

        Parameters:
        -----------
        prompt
            The prompt used as input to the generative model.
            Could be a RAG or QA or reward prompt.
        '''
        input_ids = self.tokenizer(prompt, return_tensors="pt").input_ids.to("cuda")
        outputs = self.model.generate(input_ids)

        return self.tokenizer.decode(outputs[0])

    def train(self, training_dataset, batch_size=32, num_epochs=3):
        '''Train the RAGModel on the given training_dataset

        Parameters:
        -----------
        training_dataset
            Contains the training data for query augemntation or reward generation or answer generator
        '''
        
        pass

class RAGPipeline:
    def __init__(self, config: dict):
        '''Executes each block of RAGPipeline to train query augmentation and RAG models

        Parameters:
        -----------
        qa_prompt_template
            The query augmentation prompt template to generate n-1 similar queries to a given query
        rag_prompt_template
            The prompt template to use for generating responses
        reward_prompt_template
            The prompt template to self reward responses generated by the RAGModel
        num_documents
            Numnber of docuemts to retrieve per query by the Document Retrieval Model 
        '''
        self.rag_prompt_template = default(config.get('QAPromptTemplate'), 'Default Prompt')
        self.reward_prompt_template = default(config.get('RewardPromptTemplate'), 'Default Prompt')
        self.qa_prompt_template = default(config.get('QAPromptTemplate'), 'Default Prompt')
        self.num_documents = default(config.get('NumberOfRetrievedDocuments'), 'Default Prompt')
        self.m = default(config.get('NumberOfQuerySets'), 'Default Prompt')

    def train(self, original_query):
        '''Executes a training loop of the RAGPipeline

        Parameters:
        -----------
        original_query
            The original query to generate responses for
        '''
        # Create instances of required models
        rag_model = RAGModel()
        document_retrieval_model = DocumentRetrievalModel()   
        pp_generator = PreferencePairGenerator(rag_model)

        all_queries = []
        all_responses = []
        all_docs = []
        all_rewards = []
        frist_pps = []
        qa_prompt = self.create_qa_prompt(self.qa_prompt_template, original_query)
        for i in range(m):
            queries = rag_model(qa_prompt)
            top_k_documents, all_documents = document_retrieval_model(queries)

            rag_prompt = self.create_rag_prompt(self.rag_prompt_template, original_query, top_k_documents)
            responses = rag_model(rag_prompt, queries, top_k_documents)
            responses = self.parser(responses)

            rewards = [rag_model(self.create_reward_prompt_template(response)) for response in responses.keys]
            pp1 = pp_generator.generateFirstPP(rag_prompt, responses.keys, rewards)

            frist_pps.append(pp1)
            all_queries.append(queries)
            all_responses.append(responses)
            all_docs.append(top_k_documents)
            all_rewards.append(rewards)
        
        pp2 = pp_generator.generateSecondPP(qa_prompt, all_queries, all_responses, all_docs, all_rewards)
        
        #TODO: load pp1 and pp2 in a dataset loader for training
        rag_model.train()
        
            
    def parser(self, responses):
        return {}
    
    def create_reward_prompt_template(self, response):
        return ''
    
    def create_rag_prompt(self, rag_prompt_template, original_query, documents):
        return ''
    
    def create_qa_prompt(self, qa_prompt_template, original_query):
        return ''


class PreferencePairGenerator:
    def __init__(self, rag_model: RAGModel):
        '''Generate preference pairs for a training loop of RAG pipeline

        Parameters:
        -----------
        rag_model
            RAG model to generate responses and corresponding rewards
        '''
        self.rag_model = rag_model

    def generateFirstPP(self, prompt, responses, rewards):
        '''Generates the first preference pair matrix
        '''
        responses = np.asarray(responses)
        rewards = np.asarray(rewards)

        max_idx = np.argmax(rewards)
        min_idx = np.argmin(rewards)
        
        return (prompt, responses[max_idx], responses[min_idx])  # Placeholder for a matrix

    def generateSecondPP(self, qa_prompt, queries, responses, docs, rewards):
        '''generate the second preference pair matrix
        '''
        return []  # Placeholder for another matrix